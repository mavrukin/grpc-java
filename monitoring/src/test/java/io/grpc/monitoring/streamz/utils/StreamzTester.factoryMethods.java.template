
  /**
   * Creates a reference to an ${number}-dimensional metric.
   *
   * <p> <b>Important</b> When the metric's value type
   * {@code Integer}, use {@code Long} here. That's because the collection mechanism doesn't
   * distinguish between 32- and 64-bit integers, so the fact that the metric was an {@code
   * Integer} is long gone by the time this reference gets a hold of it.
   *
   * @param metricName the name of the metric.
   * @param valueType the value type of the metric.${new_field_params_javadoc}
   */
  public <${types}, V>
  MetricReferenceTester${dimensionality}<${types}, V> metricReference(
      String metricName,
      Class<V> valueType,
      ${new_field_params}) {
    return new MetricReferenceTester${dimensionality}<${types}, V>(
        this, metricName, valueType,
        ${fields});
  }

  /**
   * Creates a reference to an ${number}-dimensional event metric.
   *
   * @param metricName The name of the metric.${new_field_params_javadoc}
   */
  public <${types}>
  MetricReferenceTester${dimensionality}<${types}, Distribution> eventMetricReference(
      String metricName,
      ${new_field_params}) {
    return new MetricReferenceTester${dimensionality}<${types}, Distribution>(
        this, metricName, Distribution.class,
        ${fields});
  }

  private <${types}, V, M extends GenericMetric<V, M>>
  MetricReferenceTester${dimensionality}<${types}, V> referenceToImpl${dimensionality}(
      GenericMetric<V, M> metric) {
    return new MetricReferenceTester${dimensionality}<${types}, V>(
      this, metric.getName(), metric.getValueType(),
      Iterables.toArray(metric.getFieldNames(), String.class));
  }

  /**
   * Creates a metric tester for a specific metric.
   *
   * @param metric the metric to create a tester for.
   */
  public <${types}, V>
  MetricReferenceTester${dimensionality}<${types}, V> referenceTo(
      Metric${dimensionality}<${types}, V> metric) {
    return referenceToImpl${dimensionality}(metric);
  }

  /**
   * Creates a metric tester for a specific event metric.
   *
   * @param metric the metric to create a tester for.
   */
  public <${types}>
  MetricReferenceTester${dimensionality}<${types}, Distribution> referenceTo(
      EventMetric${dimensionality}<${types}> metric) {
    // Can't use referenceToImpl because getUnderlyingMetric() is protected.
    return new MetricReferenceTester${dimensionality}<${types}, Distribution>(
      this, metric.getName(), Distribution.class,
      Iterables.toArray(metric.getFieldNames(), String.class));
  }

  /**
   * Creates a metric tester for a specific counter.
   *
   * @param metric the metric to create a tester for.
   */
  public <${types}>
  MetricReferenceTester${dimensionality}<${types}, Long> referenceTo(
      Counter${dimensionality}<${types}> metric) {
    return referenceToImpl${dimensionality}(metric);
  }