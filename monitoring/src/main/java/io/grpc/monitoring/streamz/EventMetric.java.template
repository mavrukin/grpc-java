// Generated by %(generator)s

package io.grpc.monitoring.streamz;

import com.google.common.collect.ImmutableList;
import com.google.protobuf.Any;

import javax.annotation.Generated;

/**
 * A %(number)s-dimensional EventMetric.
 *
 * <p>This class may only be instantiated through a {@link MetricFactory}.
 *
%(type_javadoc)s * @author ecurran@google.com (Eoin Curran)
 */
@Generated(value = "%(generator)s")
public class EventMetric%(dimensionality)d<%(types)s>
    extends EventMetricBase<EventMetric%(dimensionality)d<%(types)s>> {
  private final Metric%(dimensionality)d<%(types)s, Distribution> metric;

  EventMetric%(dimensionality)d(String name, Bucketer bucketer, Metadata metadata,
      %(new_field_params)s) {
    super(bucketer);
    metric = new Metric%(dimensionality)d<%(types)s, Distribution>(
        name, ValueTypeTraits.getTraits(Distribution.class), metadata.setCumulative(),
        ImmutableList.of(
            %(fields)s));
    metric.setDefaultValue(new Distribution(bucketer));
  }

  /**
   * Records the given value in the distribution.
   */
  public void record(
      Metric%(dimensionality)d.CellKey<%(types)s> key,
      double value) {
    if (Distribution.isValidSample(value, 1)) {
      metric.changeUnderLock(key, createChanger(value));
    }
  }

  /**
   * @see #record(Metric%(dimensionality)d.CellKey<%(types)s>, double)
   */
  public void record(
      %(params)s,
      double value) {
    record(Metric%(dimensionality)d.createCellKey(
        %(values)s), value);
  }

  /**
   * Records the given value in the distribution with provided
   * com.google.protobuf.Any attachments. All provided attachments must
   * use different type URL.
   */
  public void recordWithExemplar(
      Metric%(dimensionality)d.CellKey<%(types)s> key,
      double value, Any... attachments) {
    if (Distribution.isValidSample(value, 1)) {
      metric.changeUnderLock(key, createChanger(value, attachments));
    }
  }

  /**
   * Records the given value in the distribution with provided
   * com.google.protobuf.Any attachments. All provided attachments must
   * use different type URL.
   */
  public void recordWithExemplar(
      %(params)s,
      double value, Any... attachments) {
    recordWithExemplar(Metric%(dimensionality)d.createCellKey(
        %(values)s),
        value, attachments);
  }

  /**
   * Records the given value in the distribution, "count" times.
   */
  public void recordMultiple(
      Metric%(dimensionality)d.CellKey<%(types)s> key,
      double value, long count) {
    if (Distribution.isValidSample(value, count)) {
      metric.changeUnderLock(key, createChanger(value, count));
    }
  }

  /**
   * @see #recordMultiple(Metric%(dimensionality)d.CellKey<%(types)s>, double, long)
   */
  public void recordMultiple(
      %(params)s,
      double value, long count) {
    recordMultiple(Metric%(dimensionality)d.createCellKey(
        %(values)s),
        value, count);
  }

  /**
   * Ensures a distribution is defined for the supplied fields. If there is
   * none, one is created with zero elements. If one already exists for the
   * supplied fields, there is no change.
   *
   * @return this object.
   */
  public EventMetric%(dimensionality)d<%(types)s> forceCreate(
      Metric%(dimensionality)d.CellKey<%(types)s> key) {
    metric.getOrCreateCell(key);
    return this;
  }

  /**
   * @see #forceCreate(Metric%(dimensionality)d.CellKey<%(types)s>)
   */
  public EventMetric%(dimensionality)d<%(types)s> forceCreate(
      %(params)s) {
    return forceCreate(Metric%(dimensionality)d.createCellKey(
        %(values)s));
  }

  /**
   * Returns a copy of the distribution for the specified cell.
   */
  public Distribution get(
      Metric%(dimensionality)d.CellKey<%(types)s> key) {
    return metric.get(key);
  }

  /**
   * @see #get(Metric%(dimensionality)d.CellKey<%(types)s>)
   */
  public Distribution get(
      %(params)s) {
    return get(Metric%(dimensionality)d.createCellKey(
        %(values)s));
  }

  @Override
  protected StoredMetric<Distribution, ?> getUnderlyingMetric() {
    return metric;
  }
}