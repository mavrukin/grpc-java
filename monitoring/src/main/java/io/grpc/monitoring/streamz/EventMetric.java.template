// Generated by ${generator}

package io.grpc.monitoring.streamz;

import com.google.common.collect.ImmutableList;
import com.google.protobuf.Any;

import javax.annotation.Generated;

/**
 * A ${number}-dimensional EventMetric.
 *
 * <p>This class may only be instantiated through a {@link MetricFactory}.
 *
${type_javadoc} * @author ecurran@google.com (Eoin Curran)
 */
@Generated(value = "${generator}")
public class EventMetric${dimensionality}<${types}>
    extends EventMetricBase<EventMetric${dimensionality}<${types}>> {
  private final Metric${dimensionality}<${types}, Distribution> metric;

  EventMetric${dimensionality}(String name, Bucketer bucketer, Metadata metadata,
      ${new_field_params}) {
    super(bucketer);
    metric = new Metric${dimensionality}<${types}, Distribution>(
        name, ValueTypeTraits.getTraits(Distribution.class), metadata.setCumulative(),
        ImmutableList.of(
            ${fields}));
    metric.setDefaultValue(new Distribution(bucketer));
  }

  /**
   * Records the given value in the distribution.
   */
  public void record(
      Metric${dimensionality}.CellKey<${types}> key,
      double value) {
    if (Distribution.isValidSample(value, 1)) {
      metric.changeUnderLock(key, createChanger(value));
    }
  }

  /**
   * @see #record(Metric${dimensionality}.CellKey<${types}>, double)
   */
  public void record(
      ${params},
      double value) {
    record(Metric${dimensionality}.createCellKey(
        ${values}), value);
  }

  /**
   * Records the given value in the distribution with provided
   * com.google.protobuf.Any attachments. All provided attachments must
   * use different type URL.
   */
  public void recordWithExemplar(
      Metric${dimensionality}.CellKey<${types}> key,
      double value, Any... attachments) {
    if (Distribution.isValidSample(value, 1)) {
      metric.changeUnderLock(key, createChanger(value, attachments));
    }
  }

  /**
   * Records the given value in the distribution with provided
   * com.google.protobuf.Any attachments. All provided attachments must
   * use different type URL.
   */
  public void recordWithExemplar(
      ${params},
      double value, Any... attachments) {
    recordWithExemplar(Metric${dimensionality}.createCellKey(
        ${values}),
        value, attachments);
  }

  /**
   * Records the given value in the distribution, "count" times.
   */
  public void recordMultiple(
      Metric${dimensionality}.CellKey<${types}> key,
      double value, long count) {
    if (Distribution.isValidSample(value, count)) {
      metric.changeUnderLock(key, createChanger(value, count));
    }
  }

  /**
   * @see #recordMultiple(Metric${dimensionality}.CellKey<${types}>, double, long)
   */
  public void recordMultiple(
      ${params},
      double value, long count) {
    recordMultiple(Metric${dimensionality}.createCellKey(
        ${values}),
        value, count);
  }

  /**
   * Ensures a distribution is defined for the supplied fields. If there is
   * none, one is created with zero elements. If one already exists for the
   * supplied fields, there is no change.
   *
   * @return this object.
   */
  public EventMetric${dimensionality}<${types}> forceCreate(
      Metric${dimensionality}.CellKey<${types}> key) {
    metric.getOrCreateCell(key);
    return this;
  }

  /**
   * @see #forceCreate(Metric${dimensionality}.CellKey<${types}>)
   */
  public EventMetric${dimensionality}<${types}> forceCreate(
      ${params}) {
    return forceCreate(Metric${dimensionality}.createCellKey(
        ${values}));
  }

  /**
   * Returns a copy of the distribution for the specified cell.
   */
  public Distribution get(
      Metric${dimensionality}.CellKey<${types}> key) {
    return metric.get(key);
  }

  /**
   * @see #get(Metric${dimensionality}.CellKey<${types}>)
   */
  public Distribution get(
      ${params}) {
    return get(Metric${dimensionality}.createCellKey(
        ${values}));
  }

  @Override
  protected StoredMetric<Distribution, ?> getUnderlyingMetric() {
    return metric;
  }
}