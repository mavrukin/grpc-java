// Generated by generate.py

package io.grpc.monitoring.streamz;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;

import java.util.Set;

import javax.annotation.Generated;

/**
 * A one-dimensional Counter. This is essentially a
 * Metric1<F1, Long>,
 * with restricted API that only permits incrementing the metric.
 *
 * <p>This class may only be instantiated through a {@link MetricFactory}.
 *
 * @param <F1> The type of the first metric field.
 * @author konigsberg@google.com (Robert Konigsberg)
 */
@Generated(value = "generate.py")
public class Counter1<F1>
    extends StoredMetric<Long, Counter1<F1>> {

  Counter1(String name, ValueTypeTraits<Long> traits, Metadata metadata,
      ImmutableList<? extends Field<?>> fields) {
    super(name, traits, metadata, fields);
    Preconditions.checkArgument(getNumFields() == 1);
  }

  /**
   * @see StoredCell#increment()
   */
  public void increment(
      Metric1.CellKey<F1> key) {
    super.increment(key);
  }

  /**
   * @see #increment(Metric1.CellKey<F1>)
   */
  public void increment(
      F1 field1) {
    increment(Metric1.createCellKey(
        field1));
  }

  /**
   * @see StoredCell#incrementBy(Number)
   */
  public void incrementBy(
      Metric1.CellKey<F1> key,
      long value) {
    super.incrementBy(key, value);
  }

  /**
   * @see #increment(Metric1.CellKey<F1>, long)
   */
  public void incrementBy(
      F1 field1,
      long value) {
    incrementBy(
        Metric1.createCellKey(
            field1),
        value);
  }

  /**
   * @see StoredMetric#clear(FieldTuple)
   */
  public void clear(
      Metric1.CellKey<F1> key) {
    super.clear(key);
  }

  /**
   * @see #clear(Metric1.CellKey<F1>)
   */
  public void clear(
      F1 field1) {
    clear(Metric1.createCellKey(
        field1));
  }

  /**
   * @see StoredCell#getValue()
   */
  public Long get(
      Metric1.CellKey<F1> key) {
    return super.get(key);
  }

  /**
   * @see #get(Metric1.CellKey<F1>)
   */
  public Long get(
      F1 field1) {
    return get(Metric1.createCellKey(
        field1));
  }

  /**
   * @see StoredMetric#keySet()
   */
  // We ensure that only FieldTuples created by createCellKey are used as keys in the map
  @SuppressWarnings("unchecked")
  @Override
  public Set<Metric1.CellKey<F1>> keySet() {
    return (Set<Metric1.CellKey<F1>>) super.keySet();
  }
}