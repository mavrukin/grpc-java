// Copyright 2010 Google Inc. All Rights Reserved.
// Generated by ${generator}

package io.grpc.monitoring.streamz;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;

import javax.annotation.Generated;

/**
 * A ${number}-dimensional VirtualMetric.
 *
 * <p>This class may only be instantiated through a {@link MetricFactory}.
 *
${type_javadoc} * @author ecurran@google.com (Eoin Curran)
 */
@Generated(value = "${generator}")
public class VirtualMetric${dimensionality}<${types}, V>
    extends VirtualMetric<V, VirtualMetric${dimensionality}<${types}, V>> {
  private final Receiver<DefineCellCallback<${types}, V>> definingFunction;

  /**
   * The callback that the defining function uses to define each
   * cell in the metric.
   */
  public interface DefineCellCallback<${types}, V> {

    /**
     * Defines the value of one cell in the metric.
     */
    public void defineCell(
        ${params},
        V value);
  }

  VirtualMetric${dimensionality}(
      String name, ValueTypeTraits<V> traits, Metadata metadata,
      ImmutableList<? extends Field<?>> fields,
      Receiver<DefineCellCallback<${types}, V>> definingFunction) {
    super(name, traits, metadata, fields);
    Preconditions.checkArgument(getNumFields() == ${dimensionality});
    this.definingFunction = definingFunction;
  }

  @Override
  void applyToEachCell(final Receiver<GenericCell<V>> callback) {
    definingFunction.accept(new DefineCellCallback<${types}, V>() {
      @Override
      public void defineCell(
          ${params}, V value) {
        callback.accept(new VirtualCell<V>(
            VirtualMetric${dimensionality}.this,
            new FieldTuple(${values}),
            value));
      }
    });
  }
}
