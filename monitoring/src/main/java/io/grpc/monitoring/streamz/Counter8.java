// Generated by generate.py

package io.grpc.monitoring.streamz;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;

import java.util.Set;

import javax.annotation.Generated;

/**
 * A eight-dimensional Counter. This is essentially a
 * Metric8<F1, F2, F3, F4, F5, F6, F7, F8, Long>,
 * with restricted API that only permits incrementing the metric.
 *
 * <p>This class may only be instantiated through a {@link MetricFactory}.
 *
 * @param <F1> The type of the first metric field.
 * @param <F2> The type of the second metric field.
 * @param <F3> The type of the third metric field.
 * @param <F4> The type of the fourth metric field.
 * @param <F5> The type of the fifth metric field.
 * @param <F6> The type of the sixth metric field.
 * @param <F7> The type of the seventh metric field.
 * @param <F8> The type of the eighth metric field.
 * @author konigsberg@google.com (Robert Konigsberg)
 */
@Generated(value = "generate.py")
public class Counter8<F1, F2, F3, F4, F5, F6, F7, F8>
    extends StoredMetric<Long, Counter8<F1, F2, F3, F4, F5, F6, F7, F8>> {

  Counter8(String name, ValueTypeTraits<Long> traits, Metadata metadata,
      ImmutableList<? extends Field<?>> fields) {
    super(name, traits, metadata, fields);
    Preconditions.checkArgument(getNumFields() == 8);
  }

  /**
   * @see StoredCell#increment()
   */
  public void increment(
      Metric8.CellKey<F1, F2, F3, F4, F5, F6, F7, F8> key) {
    super.increment(key);
  }

  /**
   * @see #increment(Metric8.CellKey<F1, F2, F3, F4, F5, F6, F7, F8>)
   */
  public void increment(
      F1 field1,
      F2 field2,
      F3 field3,
      F4 field4,
      F5 field5,
      F6 field6,
      F7 field7,
      F8 field8) {
    increment(Metric8.createCellKey(
        field1, field2, field3, field4, field5, field6, field7, field8));
  }

  /**
   * @see StoredCell#incrementBy(Number)
   */
  public void incrementBy(
      Metric8.CellKey<F1, F2, F3, F4, F5, F6, F7, F8> key,
      long value) {
    super.incrementBy(key, value);
  }

  /**
   * @see #increment(Metric8.CellKey<F1, F2, F3, F4, F5, F6, F7, F8>, long)
   */
  public void incrementBy(
      F1 field1,
      F2 field2,
      F3 field3,
      F4 field4,
      F5 field5,
      F6 field6,
      F7 field7,
      F8 field8,
      long value) {
    incrementBy(
        Metric8.createCellKey(
            field1, field2, field3, field4, field5, field6, field7, field8),
        value);
  }

  /**
   * @see StoredMetric#clear(FieldTuple)
   */
  public void clear(
      Metric8.CellKey<F1, F2, F3, F4, F5, F6, F7, F8> key) {
    super.clear(key);
  }

  /**
   * @see #clear(Metric8.CellKey<F1, F2, F3, F4, F5, F6, F7, F8>)
   */
  public void clear(
      F1 field1,
      F2 field2,
      F3 field3,
      F4 field4,
      F5 field5,
      F6 field6,
      F7 field7,
      F8 field8) {
    clear(Metric8.createCellKey(
        field1, field2, field3, field4, field5, field6, field7, field8));
  }

  /**
   * @see StoredCell#getValue()
   */
  public Long get(
      Metric8.CellKey<F1, F2, F3, F4, F5, F6, F7, F8> key) {
    return super.get(key);
  }

  /**
   * @see #get(Metric8.CellKey<F1, F2, F3, F4, F5, F6, F7, F8>)
   */
  public Long get(
      F1 field1,
      F2 field2,
      F3 field3,
      F4 field4,
      F5 field5,
      F6 field6,
      F7 field7,
      F8 field8) {
    return get(Metric8.createCellKey(
        field1, field2, field3, field4, field5, field6, field7, field8));
  }

  /**
   * @see StoredMetric#keySet()
   */
  // We ensure that only FieldTuples created by createCellKey are used as keys in the map
  @SuppressWarnings("unchecked")
  @Override
  public Set<Metric8.CellKey<F1, F2, F3, F4, F5, F6, F7, F8>> keySet() {
    return (Set<Metric8.CellKey<F1, F2, F3, F4, F5, F6, F7, F8>>) super.keySet();
  }
}