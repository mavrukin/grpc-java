// Copyright 2010 Google Inc. All Rights Reserved.
// Generated by generate.py

package io.grpc.monitoring.streamz;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;

import javax.annotation.Generated;

/**
 * A six-dimensional VirtualMetric.
 *
 * <p>This class may only be instantiated through a {@link MetricFactory}.
 *
 * @param <F1> The type of the first metric field.
 * @param <F2> The type of the second metric field.
 * @param <F3> The type of the third metric field.
 * @param <F4> The type of the fourth metric field.
 * @param <F5> The type of the fifth metric field.
 * @param <F6> The type of the sixth metric field.
 * @author ecurran@google.com (Eoin Curran)
 */
@Generated(value = "generate.py")
public class VirtualMetric6<F1, F2, F3, F4, F5, F6, V>
    extends VirtualMetric<V, VirtualMetric6<F1, F2, F3, F4, F5, F6, V>> {
  private final Receiver<DefineCellCallback<F1, F2, F3, F4, F5, F6, V>> definingFunction;

  /**
   * The callback that the defining function uses to define each
   * cell in the metric.
   */
  public interface DefineCellCallback<F1, F2, F3, F4, F5, F6, V> {

    /**
     * Defines the value of one cell in the metric.
     */
    public void defineCell(
        F1 field1,
      F2 field2,
      F3 field3,
      F4 field4,
      F5 field5,
      F6 field6,
        V value);
  }

  VirtualMetric6(
      String name, ValueTypeTraits<V> traits, Metadata metadata,
      ImmutableList<? extends Field<?>> fields,
      Receiver<DefineCellCallback<F1, F2, F3, F4, F5, F6, V>> definingFunction) {
    super(name, traits, metadata, fields);
    Preconditions.checkArgument(getNumFields() == 6);
    this.definingFunction = definingFunction;
  }

  @Override
  void applyToEachCell(final Receiver<GenericCell<V>> callback) {
    definingFunction.accept(new DefineCellCallback<F1, F2, F3, F4, F5, F6, V>() {
      @Override
      public void defineCell(
          F1 field1,
      F2 field2,
      F3 field3,
      F4 field4,
      F5 field5,
      F6 field6, V value) {
        callback.accept(new VirtualCell<V>(
            VirtualMetric6.this,
            new FieldTuple(field1, field2, field3, field4, field5, field6),
            value));
      }
    });
  }
}
