
  /**
   * Creates a ${number}-dimensional metric.
   *
   * @param name see {@link #newMetric(String, Class, Metadata)}
   *    It should follow Streamz conventions
   * @param valueClass Must match &lt;V>.
   *    see {@link #newMetric(String, Class, Metadata)} for allowed values.
   * @param metadata see {@link #newMetric(String, Class, Metadata)}${new_field_params_javadoc}
   * @return The metric
   */
  public final <V, ${types}>
  Metric${dimensionality}<${types}, V> newMetric(
      String name, Class<V> valueClass, Metadata metadata,
      ${new_field_params}) {
    Metric${dimensionality}<${types}, V> metric =
        new Metric${dimensionality}<${types}, V>(
            name, ValueTypeTraits.getTraits(valueClass), metadata,
            ImmutableList.of(
                ${fields}));
    internalOnCreate(metric);
    return metric;
  }

  /**
   * Creates a ${number}-dimensional {@code CallbackMetric}.
   *
   * <p>This metric cannot be used on its own. It must be used inside a {@link CallbackTrigger}.
   *
   * @see #newTrigger for an API example.
   *
   * @param name see {@link #newMetric(String, Class, Metadata)}
   * @param valueClass Must match &lt;V>.
   *    see {@link #newMetric(String, Class, Metadata)} for allowed values.
   * @param metadata see {@link #newMetric(String, Class, Metadata)}${new_field_params_javadoc}
   * @return The metric
   */
  public final <V, ${types}>
  CallbackMetric${dimensionality}<${types}, V> newCallbackMetric(
      String name, Class<V> valueClass, Metadata metadata,
      ${new_field_params}) {
    CallbackMetric${dimensionality}<${types}, V> metric =
        new CallbackMetric${dimensionality}<${types}, V>(
            name, ValueTypeTraits.getTraits(valueClass), metadata,
            ImmutableList.of(
                ${fields}));
    internalOnCreate(metric);
    return metric;
  }

  /**
   * Creates a ${number}-dimensional Counter.
   *
   * @param name see {@link #newMetric(String, Class, Metadata)}
   * @param metadata see {@link #newMetric(String, Class, Metadata)}. A cumulative annotation
   * is added to this metric.${new_field_params_javadoc}
   * @return The metric
   */
  public final <${types}>
  Counter${dimensionality}<${types}> newCounter(
      String name, Metadata metadata,
      ${new_field_params}) {
    Counter${dimensionality}<${types}> metric =
        new Counter${dimensionality}<${types} >(
            name, ValueTypeTraits.getTraits(Long.class), metadata.setCumulative(),
            ImmutableList.of(
                ${fields}));
    internalOnCreate(metric);
    return metric;
  }

  /**
   * Constructs a ${number}-dimensional EventMetric.
   *
   * @param name see {@link #newMetric(String, Class, Metadata)}
   * @param metadata see {@link #newMetric(String, Class, Metadata)}
   * @param bucketer the bucketing function to be used for the histogram of the
   *   exported Distribution.${new_field_params_javadoc}
   * @return The metric
   */
  public final <${types}>
  EventMetric${dimensionality}<${types}> newEventMetric(
      String name, Bucketer bucketer, Metadata metadata,
      ${new_field_params}) {
    EventMetric${dimensionality}<${types}> metric =
            new EventMetric${dimensionality}<${types}>(
            name, bucketer, metadata,
            ${fields});
    internalOnCreate(metric.getUnderlyingMetric());
    return metric;
  }

  /**
   * Constructs a ${number}-dimensional EventMetric with default bucketer.
   *
   * @param name see {@link #newMetric(String, Class, Metadata)}
   * @param metadata see {@link #newMetric(String, Class, Metadata)}${new_field_params_javadoc}
   * @return The metric
   */
  public final <${types}>
  EventMetric${dimensionality}<${types}> newEventMetric(
      String name, Metadata metadata,
      ${new_field_params}) {
    return newEventMetric(name, Bucketer.DEFAULT, metadata,
            ${fields});
  }